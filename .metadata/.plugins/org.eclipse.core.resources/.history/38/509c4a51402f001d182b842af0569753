package polymorphism;

/*
 * GenericXmlApplicationContext
 * - 파일 시스템이나 클래스의 경로에 있는 xml 설정파일을 로딩하여 구동하는 스프링 컨테이너다.
 * XmlWebApplicationContext
 * - 웹기반의 스프링 어플리케이션을 개발할 때 사용하는 스프링 컨테이너다.
 */

import org.springframework.context.support.AbstractApplicationContext;
import org.springframework.context.support.GenericXmlApplicationContext;

public class TVUser {

	public static void main(String[] args) {
		/* 여기는 id값 이용(객체로)
		// 1. spring 컨테이너(여기서는 applicationContext.xml)를 구동한다.
		AbstractApplicationContext factory = new GenericXmlApplicationContext("applicationContext.xml");
		// 2. spring 컨테이너로부터 필요한 객체를 요청한다.
		TV tv = (TV)factory.getBean("tv"); // xml에서 만든 id를 검색
		tv.powerOn();
		tv.powerOff();
		tv.volumeUp();
		tv.volumeDown();
		// 3. spring 컨테이너를 종료한다.
		factory.close();
		*/ 
		
		// 여기는 클래스만 이용
		// 1. spring 컨테이너(여기서는 applicationContext.xml)를 구동한다.
		AbstractApplicationContext factory = new GenericXmlApplicationContext("applicationContext.xml");
		// 2. spring 컨테이너로부터 필요한 객체를 요청한다.
		TV tv1 = (TV)factory.getBean("tv");
		TV tv2 = (TV)factory.getBean("tv");
		TV tv3 = (TV)factory.getBean("tv");
		// TV tv2 = tv1;
		// TV tv3 = tv2; 요래하면 객체 생성 하나로 쓰는거임
		
		// 3. spring 컨테이너를 종료한다.
		factory.close();

	}

}
