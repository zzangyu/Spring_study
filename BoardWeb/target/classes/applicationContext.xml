<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd">
	
	<!-- DataSource 설정 -->
	<context:property-placeholder location="classpath:config/database.properties"/>
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	</bean>
	
	<!-- Spring JDBC 설정 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	
	<!-- Transaction 설정 -->
	<bean id="txManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"></property>
	</bean>
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" id="txPointcut"/> 
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txPointcut"/>
	</aop:config>
	
	
	<!-- aop 어노테이션 -->
   	<context:component-scan base-package="com.global.biz"></context:component-scan>
 	<aop:aspectj-autoproxy></aop:aspectj-autoproxy>
   	

	<!-- <bean id="tv" class="polymorphism.SamsungTV" init-method="initMethod" destroy-method="destroyMethod"/> -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV" scope="prototype" />  -->
	<!--lazy-init="true": bean을 미리 생성하지 않고 요청이 들어오면 그때 생성하라는 체크 -->
	<!-- singletone 객체 하나로 돌려씀 -->
	<!-- prototype 객체 여러개 생성, 요청마다 해줌 -->
	
	<!-- 삼성 티비에 소니 스피커 생성자인젝션 -->
	<!-- <bean id="tv" class="polymorphism.SamsungTV">
		<constructor-arg index="0" ref="apple" />
		<constructor-arg index="1" value="123000" />
		<property name="speaker" ref="apple" />
		<property name="price" value="10000000" />
	</bean>
	<bean id="tv" class="polymorphism.SamsungTV" p:speaker-ref="apple" p:price="2700000"/>
	 <bean id="sony" class="polymorphism.SonySpeaker" /> 
	<bean id="apple" class="polymorphism.AppleSpeaker" /> -->
	
	<!-- com.global.ioc.injection -->
	<!-- <bean id="collectionBean" class="com.global.ioc.injection.CollectionBean"> List임
		<property name="addressList">
			<list>
				<value>서울특별시 강남구 역삼동</value>
				<value>서울특별시 성동구 행당동</value>
			</list>
		</property>
	</bean> -->
	<!-- <bean id="collectionBean" class="com.global.ioc.injection.CollectionBean">
		<property name="addressList">
			 <set value-type="java.lang.String">
				<value>서울특별시 강남구 역삼동</value>
				<value>서울특별시 성동구 행당동</value>
			</set>
			<map>
				<entry>
					<key><value>홍길동</value></key>
					<value>서울특별시 강남구 역삼동</value>
				</entry>
				<entry>
					<key><value>김길동</value></key>
					<value>서울특별시 성동구 행당동</value>
				</entry>
			</map>
			<props>
				<prop key="홍길동">서울특별시 강남구 역삼동</prop>
				<prop key="김길동">서울특별시 성동구 행당동</prop>
			</props>
		</property>
	</bean> -->
	
	<!-- db 연결 + 메소드 사용 -->
	<!-- <context:component-scan base-package="com.global.biz"></context:component-scan> -->
	<!-- <bean id="userService" class="com.global.biz.user.impl.UserServiceImpl">
		<property name="userDAO" ref="userDAO"></property>
	</bean>
	<bean id="userDAO" class="com.global.biz.user.impl.UserDAO" /> -->
	
	<!-- <bean class="polymorphism.SonySpeaker"></bean> -->
	
	<!-- aop 사용 -->
	<!-- <context:component-scan base-package="com.global.biz"></context:component-scan>
	<bean id="log" class="com.global.biz.common.LogAdvice"></bean>
	<aop:config>
		<aop:pointcut expression="execution(* com.global.biz..*Impl.get*(..))" id="getPointcut"/> 
		<aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" id="allPointcut"/> 
		<aop:aspect ref="log">
			<aop:before method="printLog" pointcut-ref="getPointcut" />
			<aop:after method="printLog" pointcut-ref="getPointcut" />
		</aop:aspect>
	</aop:config> -->
	<!-- <context:component-scan base-package="com.global.biz"></context:component-scan>
	<bean id="log4j" class="com.global.biz.common.Log4jAdvice"></bean>
	<aop:config>
		<aop:pointcut expression="execution(* com.global.biz..*Impl.get*(..))" id="getPointcut"/> 
		<aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" id="allPointcut"/> 
		<aop:aspect ref="log4j">
			<aop:before method="printLogging" pointcut-ref="getPointcut" />
			<aop:after method="printLogging" pointcut-ref="getPointcut" />
		</aop:aspect>
	</aop:config> -->
	
	<!-- aop beforeAdvice -->
	<!-- <context:component-scan base-package="com.global.biz"></context:component-scan>
	<bean id="before" class="com.global.biz.common.BeforeAdvice"></bean>
	<aop:config>
		<aop:pointcut expression="execution(* com.global.biz..*Impl.get*(..))" id="getPointcut"/> 
		<aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" id="allPointcut"/> 
		<aop:aspect ref="before">
			<aop:before method="beforeLog" pointcut-ref="allPointcut"/>
		</aop:aspect>
	</aop:config> -->
	
	<!-- aop returningAdvice -->
	<!-- <context:component-scan base-package="com.global.biz"></context:component-scan>
	<bean id="afterReturning" class="com.global.biz.common.AfterReturningAdvice"></bean>
	<aop:config>
		<aop:pointcut expression="execution(* com.global.biz..*Impl.get*(..))" id="getPointcut"/> 
		<aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" id="allPointcut"/> 
		<aop:aspect ref="afterReturning">
			<aop:after-returning method="afterLog" pointcut-ref="allPointcut"/> ==> 매개변수 없을 때
			<aop:after-returning method="afterLog" returning="returnObj" pointcut-ref="allPointcut"/> ==> 매개변수 있을 때
		</aop:aspect>
	</aop:config> -->
	
	<!-- aop after-throwing -->
	<!-- <context:component-scan base-package="com.global.biz"></context:component-scan>
	<bean id="afterThrowing" class="com.global.biz.common.AfterThrowingAdvice"></bean>
	<aop:config>
		<aop:aspect ref="afterThrowing">
			<aop:pointcut expression="execution(* com.global.biz..*Impl.get*(..))" id="getPointcut"/> 
			<aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" id="allPointcut"/> 
			<aop:after-throwing method="exceptionLog" pointcut-ref="allPointcut"/> ==> 매개변수 없을 때
			<aop:after-throwing method="exceptionLog" throwing="exceptionObj" pointcut-ref="allPointcut"/> ==> 매개변수 있을 때
		</aop:aspect>
	</aop:config> -->
	
	<!-- aop afterAdvice -->
	<!-- <context:component-scan base-package="com.global.biz"></context:component-scan>
	<bean id="after" class="com.global.biz.common.AfterAdvice"></bean>    
   	<aop:config>
    	<aop:pointcut expression="execution(* com.global.biz..*Impl.get*(..))" id="getPointcut"/>
    	<aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" id="allPointcut"/>
    	<aop:aspect ref="after">
       		<aop:after method="finallyLog" pointcut-ref="allPointcut"/>
    	</aop:aspect>
   	</aop:config>    -->
   	
	<!-- aop aroundAdvice 얘는 joinPoint --> 
	<!-- <context:component-scan base-package="com.global.biz"></context:component-scan>
	<bean id="around" class="com.global.biz.common.AroundAdvice"></bean>    
   	<aop:config>
    	<aop:pointcut expression="execution(* com.global.biz..*Impl.get*(..))" id="getPointcut"/>
    	<aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" id="allPointcut"/>
    	<aop:aspect ref="around">
       		<aop:around method="aroundLog" pointcut-ref="allPointcut"/>
    	</aop:aspect>
   	</aop:config> -->
	<!-- aop aroundAdvice -->
	<!-- <context:component-scan base-package="com.global.biz"></context:component-scan>
	<bean id="aroundJP" class="com.global.biz.common.AroundAdvice"></bean>    
   	<aop:config>
    	<aop:pointcut expression="execution(* com.global.biz..*Impl.get*(..))" id="getPointcut"/>
    	<aop:pointcut expression="execution(* com.global.biz..*Impl.*(..))" id="allPointcut"/>
    	<aop:aspect ref="aroundJP">
       		<aop:around method="aroundLogJoinPoint" pointcut-ref="allPointcut"/>
    	</aop:aspect>
   	</aop:config> -->
   	
   	
</beans>

<!-- jsp에서 서블릿이라고 생각해야한다. -->
